Compiled Website > Demo
---

([https://github.com/spiralofhope/compiled-website/blob/master/examples/demo.asc View the source of this page])

<div style="color: black; background-color:
#FFFAF5
; border: 1px solid 
#F2E0CE
; -moz-border-radius: 10px; -moz-padding-start: 30px; padding:10px; margin: 0px; margin-top: 0px;"><div style="color: black; background-color: 
#BFB1A3
; border: 1px solid 
#F2E0CE
; padding:0.2em .4em; margin: 6px; margin-top: 0px;"><big><strong>
News
</strong></big></div>
<ul>
<li><font color="red">Note:</font>  There are compiled website bugs!</li>
<li>Also note that there was a massive everything-breaking rewrite, and I still have not picked up the pieces yet.</li>
</ul>
</div>

= Text =

Type as usual!

== Merged Paragraphs ==

Sentences which are next to oneanother are merged into one single paragraph.  This is how HTML works normally.

 An example sentence.
 An example sentence.
 =>
An example sentence.
An example sentence.

=== Manually-separated Paragraphs ===

If you wanted to manually separate lines of text, you can always type a `&lt;br>` tag.

 An example sentence.&lt;br>
 An example sentence.
 =>
An example sentence.<br>
An example sentence.

== Separate Paragraphs ==

To make paragraphs, have a blank line between your sentences:

 An example sentence.

An example sentence.
=>
An example sentence.

An example sentence.

---
Paragraphs will be forced further apart if more space is put between them:

 An example sentence.
 
 
 An example sentence.
 =>

An example sentence.


An example sentence.

---
 An example sentence.
 
 
  
 
 An example sentence.
 =>

An example sentence.




An example sentence.

== Sections ==

Define sections like so:

 = Title =

The more = you use, the smaller the title will be.

<!-- TODO
The text within the section will be automatically indented a little bit, to help readability.

When the user hovers over any of the section headers, a link to that section will appear. -->

<!-- TODO
=== Table of Contents ===

When you create sections, a table of contents will be automatically generated at the top-right.  It is hidden by default.

/Note that if you add or remove sections, the anchors within the page will probably become broken./
-->

== Horizontal Rules ==

Horizontal rules are created with three or more hyphens (dashes), starting at the beginning of the line and with no text following the hyphens.

If for some reason you don't want this functionality, then you could instead encapsulate some of it in some nonexistent HTML code like this:

 --&lt;nowiki>-&lt;/nowiki>
 =>

--<nowiki>-</nowiki>

=== Simple Horizontal Rules ===

With no content directly above or below:

 text
 
 --&#x2010;
 
 text
 =>

text

---

text

=== Small Horizontal Rules ===

With content above and/or below it, it'll become smaller:

 text
 --&#x2010;
 text
 =>

text
---
text

= HTML =

HTML of any form can be inserted by hand.  However, you should limit yourself to tags that are appropriate in the &lt;body> area.  Also, if used, HTML Tidy may be quite aggressive in cleaning things up.

To learn more about HTML, visit [http://www.w3.org the World Wide Web Consortium (W3C)]

 &lt;table>
 &lt;tr>&lt;th colspan="2">An example table&lt;/th>&lt;/tr>
 &lt;tr>&lt;td>one&lt;/td>&lt;td>two&lt;/td>&lt;/tr>
 &lt;tr>&lt;td>three&lt;/td>&lt;td>four&lt;/td>&lt;/tr>
 &lt;/table>
 =>

<table>
<tr><th colspan="2">An example table</th></tr>
<tr><td>one</td><td>two</td></tr>
<tr><td>three</td><td>four</td></tr>
</table>

---

 
 &lt;style type="text/css">
 p.test {color:red;}
 &lt;/style>
 &lt;p class="test">
 Inline styles are possible.
 &lt;/p>
 =>
<style type="text/css">
p.test {color:red;}
</style>
<p class="test">
Inline styles are possible.
</p>

= Simple text markup language =

== Basic markup ==

 <nowiki>*bold* **big** /emphasis/ _underline_ `truetype`</nowiki>
 =>
*bold* **big** /emphasis/ _underline_ `truetype`

== Nested markup ==

<!-- TODO:  It'll be easy to implement tags like *_text_*  where `*_` and `_*` are the opening/closing tags.. -->

Nested markup is not supported.

 <nowiki>* _underline bold_ bold *</nowiki>
 =>
* _underline bold_ bold *

== Markup within HTML ==

You can use an invalid HTML tag (&lt;nowiki> for example) to prevent one single line from being marked up.

 &lt;nowiki>_not marked up_&lt;/nowiki>
 =>
<nowiki>_not marked up_</nowiki>

The invalid HTML tag is recognized across multiple lines:

 &lt;nowiki>_not marked up_&lt;br>
 _not marked up either_&lt;/nowiki>
 =>
<nowiki>_not marked up_<br>
_not marked up either_</nowiki>

But you can also use perfectly valid HTML if you wish:

 <nowiki>&lt;u> *just underlined* &lt;/u></nowiki>
 =>
<u> *just underlined* </u>

== Gotchas ==

=== Strikethrough ===

Strikethrough was intentionally not implemented, use one of:

 &lt;s>strikethrough&lt;/s>&lt;br>
 &lt;del>delete&lt;/del>
 =>
<s>strikethrough</s><br>
<del>delete</del>

=== Italics ===

Using regular punctuation can sometimes lead to unexpected results.

 Look at <nowiki>/tmp then /wow some italicised text!/</nowiki> is not quite working.
 =>
Look at /tmp then /wow some italicised text!/ is not quite working.

In that example, you can see that the user may expect to see the slash in `/tmp`, but it is instead appearing in `/wow`.  In the example above, the plain `/tmp` could be replaced with one of these:

 Look at <nowiki>&lt;nowiki>/tmp&lt;/nowiki> then /wow some italicised text!/</nowiki> is not quite working.
 =>
Look at <nowiki>/tmp</nowiki> then /wow some italicised text!/ is not quite working.

 Look at <nowiki>`/tmp` then /wow some italicised text!/</nowiki> is not quite working.
 =>
Look at `/tmp` then /wow some italicised text!/ is not quite working.

The first solution is fine, but this last solution is recommended for displaying directory names in a nice way.

= Links =

== New Local Links ==

FIXME - bugged/not finished.

 <nowiki>[[new file]]</nowiki>
 =>
[[new file]]

When creating such a link, that new file will be created and intelligently-coloured for you to click on and edit like any existing document.

== Automatic Local Links ==

Just type with regular text, and each word and phrase will be scanned.  If an existing document is found, then a link is generated automatically. 

The main page on this site is called index, so that word will become linked.  

- For each section, only the first match will be turned into a link.
- A page will not generate links to itself.
- FIXME:  Multiple-word documents are given higher priority than single-word documents.
- Everyday punctuation is supported.  'index'.  This would become a link if index wasn't already mentioned.
- FIXME:  Markup around automatic local links is not yet supported.  Words become links, but then the markup is ignored.  /index/

You can use a dud HTML tag like &lt;nowiki> to prevent text from being marked up.

Some forgiveness is allowed.  So for a filename called 'oldschool-linux.asc' you can type several things:
- oldschool-linux (the actual filename)
- oldschool linux (lowercase)
- Oldschool Linux (title case)
- OlDSchooL LINUX (crazy-person)

Just remember only the first occurrence will be linked.

Limitations:

- Much more work needs to be done to support local links which themselves have punctuation.  With this functionality, it becomes extremely slow to process each file.

Reporting bugs:

- If you have a case where you are expecting a link and don't see one, then give the file name and /the whole paragraph/ of text.

== Plain Links ==

Links in plain text will become HTML links. Does http:// ftp:// gopher:// irc:// file://

 <nowiki>http://example.com</nowiki>
 <nowiki>http://example.com/something</nowiki>
 =>
http://example.com
http://example.com/something

Can also handle ports (but does no error checking on them)

 <nowiki>http://example.com:1234/foo/bar.html</nowiki>
 =>
http://example.com:1234/foo/bar.html

== Named Links ==

 <nowiki>[http</nowiki>://example.com display]
 <nowiki>[http</nowiki>://example.com/something display2]
 =>
[http://example.com display]
[http://example.com/something display2]

Can also handle ports (but does no error checking on them)

These links can be customized to display differently from internal links.

== Numbered Links ==

Bracketed links in the document will be numbered.

 <nowiki>[http://example.com]</nowiki>
 <nowiki>[http://example.com/something]</nowiki>
 =>
[http://example.com] [http://example.com/something]

Can also handle ports (but does no error checking on them)

These links can be customized to display differently from internal links.

= Lists =

Note that markup and other functionality is allowed in any of these blocks:

== Unordered Lists ==

FIXME - Lists should NOT process within blocks (one space) but should within multiple spaces (tabbed/formatted)

 - Item
 -- Nested
 - Item
 =>
- Item
-- Nested
- Item

== Ordered Lists ==

FIXME

 # Item
 ## Nested
 # Item
 =>
# Item
## Nested
# Item

== Indented Blocks ==

TODO - not implemented yet

 : item
 :: nested
 : item
 =>
: item
:: nested
: item

== Preformatted Blocks ==

One or more spaces with zero or more characters.

 Item
  Nested
 Item
 =>

 Item
  Nested
 Item

FIXME - busted / not thought out.

Regular markup is respected within these blocks.

 <nowiki>/italics/ *bold* http://example.com [http://example.com]</nowiki>
 =>
 /italics/ *bold* http://example.com [http://example.com]

= Misc =

- &lt;title> elements are automatically-generated based on the file's name.

<!-- TODO
- A <a href="sitemap.html">sitemap</a> is automatically-generated, containing an alphabetically-ordered list of all pages.
-- Basic privacy functionality will exist in a future revision.  It's doubtful that I'll program a way to omit individual pages from the sitemap, but I will create an internal wiki concept which will be marked-up and will have its own sitemap and is meant to be kept locally and not uploaded.
-->
